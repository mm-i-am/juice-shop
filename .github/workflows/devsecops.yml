name: DevSecOps Scans

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  gitleaks:
    name: Secrets (Gitleaks)
    runs-on: ubuntu-latest
    outputs:
      gate_fail: ${{ steps.eval.outputs.fail }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --redact --report-format sarif --report-path gitleaks.sarif
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload SARIF (gitleaks)
        if: always() && hashFiles('gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - id: eval
        name: Evaluate gate (gitleaks)
        run: |
          if [ -f gitleaks.sarif ]; then
            CNT=$(jq '[.runs[]?.results[]?] | length' gitleaks.sarif)
          else CNT=0; fi
          echo "fail=$([ "${CNT:-0}" -gt 0 ] && echo 1 || echo 0)" >> $GITHUB_OUTPUT

  semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    outputs:
      gate_fail: ${{ steps.eval.outputs.fail }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-top-ten p/ci p/nodejs p/javascript
          args: --sarif --output=semgrep.sarif
      - name: Upload SARIF (semgrep)
        if: always() && hashFiles('semgrep.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - id: eval
        name: Evaluate gate (semgrep)
        run: |
          if [ -f semgrep.sarif ]; then
            HC=$(jq '[.runs[]?.results[]? | select((.properties.severity//""|ascii_upcase)=="HIGH" or (.properties.severity//""|ascii_upcase)=="CRITICAL" or (.level//""|ascii_downcase)=="error")] | length' semgrep.sarif)
          else HC=0; fi
          echo "fail=$([ "${HC:-0}" -gt 0 ] && echo 1 || echo 0)" >> $GITHUB_OUTPUT

  trivy_fs:
    name: Trivy FS (vuln+secrets+config)
    runs-on: ubuntu-latest
    outputs:
      gate_fail: ${{ steps.eval.outputs.fail }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy FS
        uses: aquasecurity/trivy-action@0.24.0
        with:
          args: fs --format sarif --output trivy-fs.sarif --ignore-unfixed --severity HIGH,CRITICAL --exit-code 0 --scanners vuln,secret,config .
      - name: Upload SARIF (trivy fs)
        if: always() && hashFiles('trivy-fs.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - id: eval
        name: Evaluate gate (trivy)
        run: |
          if [ -f trivy-fs.sarif ]; then
            CNT=$(jq '[.runs[]?.results[]?] | length' trivy-fs.sarif)
          else CNT=0; fi
          echo "fail=$([ "${CNT:-0}" -gt 0 ] && echo 1 || echo 0)" >> $GITHUB_OUTPUT

  checkov_hadolint:
    name: IaC/Docker (Checkov + Hadolint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkov (Dockerfile/Compose)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,compose
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: true
      - name: Upload SARIF (checkov)
        if: always() && hashFiles('checkov.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
      - name: Hadolint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
        continue-on-error: true

  dast_zap:
    name: DAST (ZAP baseline)
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: ${{ secrets.STAGING_URL }}
          cmd_options: "-a -m 5 -r zap-report.html"
        continue-on-error: true
      - name: Ensure report exists
        run: '[ -f zap-report.html ] || echo "ZAP report not generated" > zap-report.html'
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  security_gate:
    name: Security gate
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep, trivy_fs, checkov_hadolint, dast_zap]
    steps:
      - run: |
          echo "GITLEAKS=${{ needs.gitleaks.outputs.gate_fail }}"
          echo "SEMGREP=${{ needs.semgrep.outputs.gate_fail }}"
          echo "TRIVY=${{ needs.trivy_fs.outputs.gate_fail }}"
          FAILS=0
          [ "${{ needs.gitleaks.outputs.gate_fail }}" = "1" ] && FAILS=1
          [ "${{ needs.semgrep.outputs.gate_fail }}" = "1" ] && FAILS=1
          [ "${{ needs.trivy_fs.outputs.gate_fail }}" = "1" ] && FAILS=1
          if [ $FAILS -eq 1 ]; then echo "Security gate FAILED"; exit 1; else echo "Security gate PASSED"; fi

  render_deploy:
    name: Trigger Render deploy
    runs-on: ubuntu-latest
    needs: security_gate
    if: github.ref == 'refs/heads/master' && needs.security_gate.result == 'success'
    steps:
      - name: Trigger Render Deploy
        run: curl -fsS -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
